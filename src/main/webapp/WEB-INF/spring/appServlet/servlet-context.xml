<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
		https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- springframework버전 4.3.22.RELEASE로 pom.xml수정하고, 아래 엘리먼트 추가 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/html/**" location="/resources/html/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/css/**"	location="/resources/css/" />
	<resources mapping="/style/**" location="/resources/style/" />
	<resources mapping="/image/**" location="/resources/image/" />
	<resources mapping="/upimage/**" location="/resources/upimage/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- spring에서 제공하는 dataSource bean을 정의 -->
	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<beans:property name="username" value="Escaperoom"/>
		<beans:property name="password" value="1234"/>
	</beans:bean>
	
	<!-- dataSource bean을 멤버필드로 사용하는 JdbcTemplate bean정의 -->
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- transactionManager 처리 -->
	<beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!--  transactionTemplate추가(transactionmanager를 속성으로 갖고 있음 -->
	<beans:bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<beans:property name="transactionManager" ref="transactionManager"/>
	</beans:bean>
	
	<!-- commons fileupload 빈 -->
	<beans:bean name="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- max upload size in bytes -->
		<beans:property name="maxUploadSize" value="5242880" /> <!-- 5M -->
		<!-- max size of file in memory (in bytes) -->
		<beans:property name="maxInMemorySize" value="1048576" />  <!-- 1M -->
	</beans:bean>
	
	
	<!-- mybatis처리를 위한 클래스 객체 -->
	<beans:bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="mapperLocations" value="classpath:com/EscapeRoom/**/*.xml"></beans:property>
		<!-- <beans:property name="mapperLocations" value="classpath:com/skc/ezen/dao/mapper/*.xml"/> -->
	</beans:bean>
	
	<!-- sql처리에 필요한 모든 메서드를 가지고 있는 객체 -->
	<beans:bean name="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory"/>
	</beans:bean>
	
	<!-- 패스워드 암호화 bean(회원가입시 패스워드 암호화, 로그인시는 security-context.xml에서 처리 -->
	<beans:bean name="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- dao 빈 -->
	<beans:bean name="tdao" class="com.EscapeRoom.theme.dao.ThemeDao"/>
	<beans:bean name="rdao" class="com.EscapeRoom.reserve.dao.ReserveDao"/>
	<beans:bean name="edao" class="com.EscapeRoom.admin.dao.ProjectAdminDao" />
	<!-- BoardDao 의 bean -->
	<beans:bean name="dao" class="com.EscapeRoom.board.dao.BoardDao">
		<beans:property name="sqlSession" ref="sqlSession"/>
	</beans:bean>
	
	
	
	
	<context:component-scan base-package="com.EscapeRoom.reserve,com.EscapeRoom.theme,com.EscapeRoom.admin,com.EscapeRoom.board" />
	
	
	
</beans:beans>
